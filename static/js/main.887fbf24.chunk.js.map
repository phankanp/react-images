{"version":3,"sources":["components/Header.jsx","components/Photo.jsx","components/NoPhotos.jsx","components/Navigation.jsx","components/PhotoList.jsx","config.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","handleSubmit","e","preventDefault","_this","props","onSearch","query","value","path","concat","currentTarget","reset","history","push","this","_this2","react_default","a","createElement","Navbar","bg","variant","lib","to","onClick","handleClick","Brand","Nav","className","Form","inline","onSubmit","FormControl","type","placeholder","ref","input","Button","id","Component","withRouter","imageStyle","height","width","colStyle","paddingTop","Photo","Col","xs","md","style","Image","src","url","alt","thumbnail","containerStyle","NoPhotos","Container","navStyle","Breadcrumb","Item","headerStyle","paddingBottom","ImageList","_ref","loading","title","currentTitle","fetchPhotos","getPhotos","data","photos","results","length","map","image","console","log","farm","server","secret","components_Photo","key","components_NoPhotos","components_Navigation","term","Row","apiKey","process","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","performSearch","arguments","undefined","axios","get","then","response","setState","photo","catch","error","nextTitle","Spinner","animation","react_router_dom","components_Header","react_router","exact","render","PhotoList","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.887fbf24.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport { Navbar, Nav, Form, FormControl, Button } from \"react-bootstrap\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\n\r\nclass Header extends Component {\r\n  state = {};\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.onSearch(this.query.value);\r\n    let path = `/search?q=${this.query.value}`;\r\n    e.currentTarget.reset();\r\n    this.props.history.push(path);\r\n  };\r\n\r\n  handleClick(e, query) {\r\n    e.preventDefault();\r\n    this.props.onSearch(query);\r\n    this.props.history.push(\"/\");\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Navbar bg=\"dark\" variant=\"dark\">\r\n        <LinkContainer to=\"/\" onClick={e => this.handleClick(e, \"Baseball\")}>\r\n          <Navbar.Brand>Flikr-Gallery</Navbar.Brand>\r\n        </LinkContainer>\r\n        <Nav className=\"mr-auto\" />\r\n        <Form inline onSubmit={this.handleSubmit}>\r\n          <FormControl\r\n            type=\"search\"\r\n            placeholder=\"Search\"\r\n            className=\"mr-sm-2\"\r\n            ref={input => (this.query = input)}\r\n          />\r\n          <Button variant=\"outline-info\" type=\"submit\" id=\"submit\">\r\n            Search\r\n          </Button>\r\n        </Form>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Header);\r\n","import React from \"react\";\r\nimport { Image, Col } from \"react-bootstrap\";\r\n\r\nconst imageStyle = {\r\n  height: 200,\r\n  width: 400\r\n};\r\n\r\nconst colStyle = {\r\n  paddingTop: 30\r\n};\r\n\r\nconst Photo = props => (\r\n  <Col xs={12} md={4} style={colStyle}>\r\n    <Image src={props.url} alt=\"\" style={imageStyle} thumbnail />\r\n  </Col>\r\n);\r\n\r\nexport default Photo;\r\n","import React from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\n\r\nconst NoPhotos = props => (\r\n  <Container style={containerStyle}>\r\n    <div className=\"text-center\">\r\n      <h3 className=\"text-center\">Sorry, no Images match your search.</h3>\r\n    </div>\r\n  </Container>\r\n);\r\n\r\nconst containerStyle = {\r\n  paddingTop: 50\r\n};\r\n\r\nexport default NoPhotos;\r\n","import React from \"react\";\r\nimport { Nav, Breadcrumb } from \"react-bootstrap\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nconst Navigation = props => {\r\n  function handleClick(e, query) {\r\n    e.preventDefault();\r\n    props.onSearch(query);\r\n    props.history.push(`/${query}`);\r\n  }\r\n\r\n  return (\r\n    <Nav className=\"justify-content-center\" style={navStyle}>\r\n      <LinkContainer to=\"/Football\" onClick={e => handleClick(e, \"Football\")}>\r\n        <Breadcrumb.Item>Football</Breadcrumb.Item>\r\n      </LinkContainer>\r\n      <LinkContainer\r\n        to=\"/Basketball\"\r\n        onClick={e => handleClick(e, \"Basketball\")}\r\n      >\r\n        <Breadcrumb.Item>Basketball</Breadcrumb.Item>\r\n      </LinkContainer>\r\n      <LinkContainer to=\"/Soccer\" onClick={e => handleClick(e, \"Soccer\")}>\r\n        <Breadcrumb.Item>Soccer</Breadcrumb.Item>\r\n      </LinkContainer>\r\n    </Nav>\r\n  );\r\n};\r\n\r\nconst navStyle = {\r\n  paddingTop: 30\r\n};\r\n\r\nexport default withRouter(Navigation);\r\n","import React from \"react\";\r\nimport Photo from \"./Photo\";\r\nimport NoPhotos from \"./NoPhotos\";\r\nimport Navigation from \"./Navigation\";\r\nimport { Row, Container } from \"react-bootstrap\";\r\n\r\nconst ImageList = ({\r\n  loading,\r\n  title,\r\n  currentTitle,\r\n  fetchPhotos,\r\n  getPhotos,\r\n  data\r\n}) => {\r\n  if (title !== currentTitle && title !== \"Search\") {\r\n    getPhotos(title);\r\n  }\r\n\r\n  const results = data;\r\n  let photos;\r\n  if (results.length) {\r\n    photos = results.map(image => {\r\n      console.log(image);\r\n      const url = `https://farm${image.farm}.staticflickr.com/${image.server}/${\r\n        image.id\r\n      }_${image.secret}.jpg`;\r\n      return <Photo url={url} key={image.id} />;\r\n    });\r\n  } else {\r\n    photos = <NoPhotos />;\r\n  }\r\n\r\n  return (\r\n    <Container style={containerStyle}>\r\n      <Navigation onSearch={term => fetchPhotos(term)} title={title} />\r\n      <h1 className=\"text-center\" style={headerStyle}>\r\n        {currentTitle}\r\n      </h1>\r\n      <Row>{photos}</Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst headerStyle = {\r\n  paddingTop: 30\r\n};\r\n\r\nconst containerStyle = {\r\n  paddingBottom: 50\r\n};\r\n\r\nexport default ImageList;\r\n","const apiKey = process.env.REACT_APP_WEATHER_API_KEY;\r\n\r\nexport default apiKey;\r\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { Container, Spinner } from \"react-bootstrap\";\nimport Header from \"./components/Header\";\nimport PhotoList from \"./components/PhotoList\";\nimport apiKey from \"./config\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      photos: [],\n      currentTitle: \"\",\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n    this.performSearch();\n  }\n\n  performSearch = (query = \"Baseball\") => {\n    axios\n      .get(\n        `https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&text=${query}&per_page=25&page=1&format=json&nojsoncallback=1`\n      )\n      .then(response => {\n        this.setState({\n          photos: response.data.photos.photo,\n          loading: false,\n          currentTitle: query\n        });\n      })\n      .catch(error => {\n        console.log(\"Error fetching and parsing data\", error);\n      });\n  };\n\n  getPhotos(nextTitle) {\n    this.performSearch(nextTitle);\n  }\n\n  render() {\n    if (this.state.loading) {\n      return (\n        <Container className=\"text-center\" style={containerStyle}>\n          <Spinner animation=\"border\" />\n        </Container>\n      );\n    }\n    return (\n      <BrowserRouter>\n        <Header onSearch={this.performSearch} />\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <PhotoList\n                data={this.state.photos}\n                title={this.state.currentTitle}\n                currentTitle={this.state.currentTitle}\n                getPhotos={nextTitle => this.getPhotos(nextTitle)}\n                fetchPhotos={term => this.performSearch(term)}\n              />\n            )}\n          />\n          <Route\n            path=\"/Football\"\n            render={() => (\n              <PhotoList\n                title=\"Football\"\n                currentTitle={this.state.currentTitle}\n                getPhotos={nextTitle => this.getPhotos(nextTitle)}\n                fetchPhotos={term => this.performSearch(term)}\n                data={this.state.photos}\n              />\n            )}\n          />\n          <Route\n            path=\"/Basketball\"\n            render={() => (\n              <PhotoList\n                title=\"Basketball\"\n                currentTitle={this.state.currentTitle}\n                getPhotos={nextTitle => this.getPhotos(nextTitle)}\n                fetchPhotos={term => this.performSearch(term)}\n                data={this.state.photos}\n              />\n            )}\n          />\n          <Route\n            path=\"/Soccer\"\n            render={() => (\n              <PhotoList\n                title=\"Soccer\"\n                currentTitle={this.state.currentTitle}\n                getPhotos={nextTitle => this.getPhotos(nextTitle)}\n                fetchPhotos={term => this.performSearch(term)}\n                data={this.state.photos}\n              />\n            )}\n          />\n          <Route\n            path=\"/search\"\n            render={() => (\n              <PhotoList\n                loading={this.state.loading}\n                data={this.state.photos}\n                title=\"Search\"\n                currentTitle={this.state.currentTitle}\n                getPhotos={nextTitle => this.getPhotos(nextTitle)}\n                fetchPhotos={term => this.performSearch(term)}\n              />\n            )}\n          />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nconst containerStyle = {\n  paddingTop: 350\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}